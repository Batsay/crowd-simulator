/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package framework.environment

import org.arakhne.afc.math.MathUtil
import org.arakhne.afc.math.geometry.d2.d.Shape2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import framework.time.TimeManager
import java.util.UUID

import static extension java.lang.Math.*

/**
 * Abstract implementation of an object on the environment.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
abstract class AbstractMobileObject extends AbstractSituatedObject implements MobileObject {

	val maxLinearSpeed : double
	val maxLinearAcceleration : double
	val maxAngularSpeed : double
	val maxAngularAcceleration : double
	
	var angle = 0.0
	var currentAngularSpeed = 0.0
	var linearMove = new Vector2d

	/**
	 * @param id the identifier of the object.
	 * @param shape the shape of the body, considering that it is centered at the (0,0) position.
	 * @param maxLinearSpeed is the maximal linear speed.
	 * @param maxLinearAcceleration is the maximal linear acceleration.
	 * @param maxAngularSpeed is the maximal angular speed.
	 * @param maxAngularAcceleration is the maximal angular acceleration.
	 */
	new (id : UUID, shape : Shape2d<?>, maxLinearSpeed : double, maxLinearAcceleration : double, maxAngularSpeed : double,
		maxAngularAcceleration : double) {
		super(id, shape)
		this.maxLinearSpeed = maxLinearSpeed.abs
		this.maxLinearAcceleration = maxLinearAcceleration.abs
		this.maxAngularAcceleration = maxAngularAcceleration.abs
		this.maxAngularSpeed = maxAngularSpeed.abs
	}
	
	override clone : AbstractMobileObject {
		var clone = super.clone as AbstractMobileObject
		clone.linearMove = this.linearMove.clone
		return clone
	}

	override getAngle : double {
		this.angle
	}
	
	override getDirection : Vector2d {
		Vector2d::toOrientationVector(this.angle)
	}

	/** Set the orientation of the object.
	 * 
	 * @param angle
	 */
	protected def setAngle(angle : double) {
		this.angle = angle
		this.currentAngularSpeed = 0
	}

	/** Set the direction of the object.
	 * 
	 * @param dx
	 * @param dy
	 */
	protected def setDirection(dx : double, dy : double) {
		this.angle = new Vector2d(dx, dy).orientationAngle
		this.currentAngularSpeed = 0
	}

	override getMaxLinearSpeed : double {
		this.maxLinearSpeed
	}

	override getMaxAngularSpeed : double {
		this.maxAngularSpeed
	}

	override getMaxLinearAcceleration : double {
		this.maxLinearAcceleration
	}

	override getMaxAngularAcceleration : double {
		this.maxAngularAcceleration
	}
	
	override getCurrentAngularSpeed : double {
		this.currentAngularSpeed
	}

	override getCurrentLinearSpeed : double {
		this.linearMove.length
	}

	override getCurrentLinearMotion : Vector2d {
		this.linearMove.clone
	}

	/** Rotate the object.
	 * 
	 * @param rotation is the real instant motion. 
	 * @param simulationDuration is the time during which the motion is applied.
	 */
	protected def rotate(rotation : double, simulationDuration : double) {
		//TODO assert (!Double.isNaN(rotation)) : LocalizedString.getString(getClass(), "INVALID_ROTATION", getName());
		//TODO assert (!Double.isNaN(simulationDuration)) : LocalizedString.getString(getClass(), "INVALID_DURATION", getName());
		this.angle += rotation
		this.currentAngularSpeed = rotation / simulationDuration
	}

	def setPosition(x : double, y : double) {
		super.setPosition(x, y)
		this.linearMove.set(0,0)
	}

	/** Move the situated object.
	 * 
	 * @param dx is the real instant motion. 
	 * @param dy is the real instant motion.
	 * @param simulationDuration is the time during which the motion is applied.
	 * @param worldWidth is the width of the world.
	 * @param worldHeight is the height of the world.
	 * @return the real motion.
	 */
	protected def move(dx : double, dy : double, simulationDuration : double, worldWidth : double,
			worldHeight : double) : Vector2d {
		// Ensure that the motion in inside the bounds of the world.
		var r = new Vector2d(dx, dy)
//		var currentShape = this.shape
//		var targetShape = currentShape.translate(r)
//		var targetBounds = targetShape.bounds
		
		
		/* I had to tinker with this. I think this is the correct 
		 * translation of the deprecated methods
		 */
		var targetShape = this.shape
		targetShape.translate(r.x,r.y)
		var targetBounds = targetShape.toBoundingBox

		if (targetBounds.minX < 0) {
			r.addX(-targetBounds.minX)
		} else if (targetBounds.maxX > worldWidth) {
			r.subX(targetBounds.maxX - worldWidth)
		}
		
		if (targetBounds.minY < 0) {
			r.addY(-targetBounds.minY)
		} else if (targetBounds.maxY > worldHeight) {
			r.subY(targetBounds.maxY - worldHeight)
		}

/*		if (targetBounds.lower.x < 0) {
			r.addX(-targetBounds.lower.x)
		} else if (targetBounds.upper.x > worldWidth) {
			r.subX(targetBounds.upper.x - worldWidth)
		}

		if (targetBounds.lower.y < 0) {
			r.addY(-targetBounds.lower.y)
		} else if (targetBounds.upper.y > worldHeight) {
			r.subY(targetBounds.upper.y - worldHeight)
		}
		*/

		// Update the position
		addPosition(r.x, r.y)
		
		// Update dynamic properties
		if (simulationDuration > 0) {
			this.linearMove.set(r.x, r.y)
			var distance = this.linearMove.length
			if (distance > 0) {
				this.linearMove.normalize
				/* *= wouldn't work. */
				this.linearMove.scale(distance/simulationDuration)
				//this.linearMove *= (distance / simulationDuration)
			}
		} else {
			this.linearMove.set(0, 0)
		}

		return r
	}

	/** Compute a steering move according to the linear move and to
	 * the internal attributes of this object.
	 * 
	 * @param move is the requested motion, expressed with acceleration.
	 * @param clock is the simulation time manager
	 * @return the linear instant motion.
	 */
	protected def computeSteeringTranslation(move : Vector2d, clock : TimeManager) : Vector2d {
		var length = move.length

		var v : Vector2d
		
		if (length !== 0.0) {
			// Clamp acceleration
			var acceleration = MathUtil::clamp(
					if (move * this.linearMove < 0.0) -length else length,
					-this.maxLinearAcceleration, 
					this.maxLinearAcceleration)
			
			// Apply Newton law, first part (from acceleration to speed)
			acceleration = acceleration.abs / length
			v = move * acceleration
			
			
			//v *= 0.5 * clock.lastStepDuration
			v.scale(0.5 * clock.lastStepDuration)
			v += this.linearMove
		}
		else {
			v = this.linearMove.clone
		}
		
		// v is a speed - unit: [m/s]
		
		length = v.x * v.x + v.y * v.y
		if (length != 0.0) {
			length = length.sqrt as double
			// Clamp the speed
			var speed = MathUtil::clamp(
					if (v * this.linearMove < 0.0) -length else length, 
					0.0, 
					this.maxLinearSpeed);

			// Compute the Newton law, part 2 (from speed to distance)
			var factor = clock.lastStepDuration * speed.abs / length
		
			return v * factor
		}
		
		return new Vector2d
	}

	/** Compute a kinematic move according to the linear move and to
	 * the internal attributes of this object.
	 * 
	 * @param move is the requested motion, expressed with speed.
	 * @param clock is the simulation time manager
	 * @return the linear instant motion.
	 */
	protected def computeKinematicTranslation(move : Vector2d, clock : TimeManager) : Vector2d {
		var speed = move.length
		if (speed != 0.0) {
			// Apply Newton-Euler-1 law
			var factor = clock.lastStepDuration * MathUtil::clamp(speed, 0, this.maxLinearSpeed) / speed
			return move * factor
		}
		return new Vector2d
	}

	/** Compute a kinematic move according to the angular move and to
	 * the internal attributes of this object.
	 * 
	 * @param move is the requested motion with speed.
	 * @param clock is the simulation time manager
	 * @return the angular instant motion.
	 */
	protected def computeKinematicRotation(move : double, clock : TimeManager) : double {
		var speed = move.abs
		if (speed != 0.0) {
			// Apply Newton-Euler-1 law
			var factor = clock.lastStepDuration * MathUtil::clamp(speed, 0, this.maxAngularSpeed) / speed
			return move * factor
		}
		return 0.0
	}

	/** Compute a steering move according to the angular move and to
	 * the internal attributes of this object.
	 * 
	 * @param move is the requested motion.
	 * @param clock is the simulation time manager
	 * @return the angular instant motion.
	 */
	protected def computeSteeringRotation(move : double, clock : TimeManager) : double {
		var v : double
		
		if (move != 0.0) {
			// Clamp acceleration
			var acceleration = MathUtil::clamp(
					move, 
					-this.maxAngularAcceleration, 
					this.maxAngularAcceleration)
			
			// Apply Newton law, first part (from acceleration to speed)
			acceleration = acceleration.abs / move.abs
			v = move * acceleration
			v *= 0.5 * clock.lastStepDuration
			v += this.currentAngularSpeed
		}
		else {
			v = this.currentAngularSpeed
		}
		
		// v is a speed - unit: [m/s]
		
		if (v != 0.0) {
			// Clamp the speed
			var speed = MathUtil.clamp(
					v, 
					-this.maxAngularSpeed, 
					this.maxAngularSpeed);

			// Compute the Newton law, part 2 (from speed to distance)
			var factor = clock.lastStepDuration * speed.abs / v.abs;
		
			return v * factor
		}
		
		return 0.0
	}

}