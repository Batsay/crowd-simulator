/* 
 * $Id$
 * 
 * Copyright (c) 2011-17 Stephane GALLAND <stephane.galland@utbm.fr>.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * This program is free software; you can redistribute it and/or modify
 */
package framework.environment

import java.io.Serializable
import java.util.UUID

import com.google.common.base.Objects

import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.math.geometry.d2.d.Shape2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/**
 * Defined a perception unit.
 * 
 * @author St&eacute;phane GALLAND &lt;stephane.galland@utbm.fr&gt;
 * @version $Name$ $Revision$ $Date$
 */
class Percept implements MobileObject, Serializable {

	val bodyId : UUID
	val objectId : UUID
	var shape : Shape2d<?> 
	var position : Point2d
	val angle : double
	val type : Serializable
	val maxLinearSpeed : double 
	val maxLinearAcceleration : double 
	var currentLinearMotion : Vector2d
	var maxAngularSpeed : double
	val maxAngularAcceleration : double 
	val currentAngularSpeed : double
	val name : String 
	
	/**
	 * @param perceivedObject is the perceived object.
	 */
	new (perceivedObject : SituatedObject, type : Serializable = null) {
		this.objectId = perceivedObject.ID
		this.name = perceivedObject.name
		this.shape = perceivedObject.shape
		this.position = perceivedObject.position.clone
		var rtype = type ?: perceivedObject.type
		this.type = rtype ?: perceivedObject.class.name
		if (perceivedObject instanceof MobileObject) {
			this.angle = perceivedObject.angle
			this.maxAngularAcceleration = perceivedObject.maxAngularAcceleration
			this.maxAngularSpeed = perceivedObject.maxAngularSpeed
			this.maxLinearAcceleration = perceivedObject.maxLinearAcceleration
			this.maxLinearSpeed = perceivedObject.maxLinearSpeed
			this.currentAngularSpeed = perceivedObject.currentAngularSpeed
			this.currentLinearMotion = perceivedObject.currentLinearMotion.clone
		} else {
			this.angle = 0.0
			this.maxAngularAcceleration = 0.0
			this.maxAngularSpeed = 0.0
			this.maxLinearAcceleration = 0.0
			this.maxLinearSpeed = 0.0
			this.currentAngularSpeed = 0.0
			this.currentLinearMotion = null
		}
		if (perceivedObject instanceof AgentBody) {
			this.bodyId = perceivedObject.ID
		} else {
			this.bodyId = null
		}
	}
	
	override clone : Percept {
		var clone = super.clone as Percept
		clone.currentLinearMotion = this.currentLinearMotion.clone
		clone.position = this.position.clone
		clone.shape = this.shape.clone
		return clone
	}
	
	override equals(obj : Object) : boolean {
		if (obj instanceof Percept) {
			return this.bodyId == obj.bodyId && this.objectId == obj.objectId
		}
		return false
	}
	
	override hashCode : int {
		Objects.hashCode(this.bodyId, this.objectId)
	}
	
	override compareTo(o : SituatedObject) : int {
		if (o instanceof Percept) {
			if (this.bodyId !== null) {
				var c = this.bodyId <=> o.ID
				if (c != 0) {
					return c
				}
			}
			if (this.objectId !== null) {
				return this.objectId <=> o.ID
			}
		}
		return Integer::MAX_VALUE
	}

	/** Replies the id of the body.
	 *
	 * @return the id of the body.
	 */
	def getBodyID : UUID {
		this.bodyId
	}

	/** Replies the id of the body.
	 *
	 * @return the id of the body.
	 */
	def getID : UUID {
		this.objectId
	}

	override getShape : Shape2d<?> {
		this.shape
	}

	override getX : double {
		this.position.x
	}

	override getY : double {
		this.position.y
	}

	override getPosition : Point2d {
		this.position
	}

	override getAngle : double {
		this.angle
	}

	override getDirection : Vector2d {
		Vector2d::toOrientationVector(this.angle)
	}

	override getMaxLinearSpeed : double{
		this.maxLinearSpeed
	}

	override getMaxAngularSpeed : double {
		this.maxAngularSpeed
	}

	override getMaxLinearAcceleration : double {
		this.maxLinearAcceleration
	}

	override getMaxAngularAcceleration : double {
		this.maxAngularAcceleration
	}

	override getCurrentAngularSpeed : double {
		this.currentAngularSpeed
	}

	@SuppressWarnings("null_safe_feature_call_on_primitive_valued_feature")
	/* Expected behavior */
	override getCurrentLinearSpeed : double {
		this.currentLinearMotion?.length
	}

	override getCurrentLinearMotion : Vector2d {
		/* Had to use a good ol' if else 
		 * not sure why the ternary operator wouldn't work ?
		 */
		if (this.currentLinearMotion == null){
			new Vector2d
		} else {
			this.currentLinearMotion
		}
		//this.currentLinearMotion ?: new Vector2d
	}

	override getType : Serializable {
		this.type
	}

	override getName : String {
		this.name
	}
	
	override toString : String {
		if(this.name.isNullOrEmpty) super.toString() else this.name
	}

}